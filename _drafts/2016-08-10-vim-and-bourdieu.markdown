During my last job search, a frequent question was often posed to me, something to the effect of, "so, I can't help but notice you have an MA in Sociology? What is the point of that?" Well, I have many, many thoughts about the use of sociology which go well beyond the scope of a humble blog post such as this, but a recent occurrence at my job illustrates, I think, one application of sociology to one of the most timeless controversies in all of programming, the emacs vs. vim debate.

Now, for those unaware, Emacs and Vim are two competing text editors. If you have a Mac or Linux machine, they are already installed on your machine. Although it is safe to say the general public is completely unaware of the existence of either, they are two of the most long-used pieces of software in the history of computing - Mark Zuckerberg wrote the earliest iteration of Facebook with Emacs, for instance. (Early AI research using the programming language LISP was also conducted with Emacs during the 1970s.)

Of the two, Emacs is the bigger, harder one - it comes with an enormous amount of functionality and has a steep learning curve even for relatively simple tasks. Vim, by contrast, although still enormously complex by the standards of modern GUI word processors, is a simpler, stripped-down alternative. Although Vim and Emacs are both popular amongst programmers, I do not want to give the impression that they are two competing hegemons within the programming community. Rather, there are at least two significant alternatives to Vim/Emacs: integrated development environments (IDEs) and modern GUI text editors such as Atom and Sublime Text.

Integrated Development Environments are, essentially, text editors plus a whole litany of additional tools to help programmers write programs. They can have a wide variety of features, including, for instance, a built-in interface to run units tests or to compile source. They became enormously popular in the 1990s; notably, they were used by Java developers. (Another version of the Emacs-Vim dispute exists within the Java world over the best Java IDE. (They are all, in fact, terrible)). IDEs are more popular with the communities around certain languages - for instance, use of IDEs is relatively rare amongst Rubyists or back-end JavaScript devs. They are, however, nearly ubiquitous amongst, say, Java or (for different reasons) Swift developers.

The other major category here are "modern" GUI text editors. Effectively, these are Vim that you can point and click with, or, perhaps more accurately, they are beefed up versions of Microsoft Notepad. Sublime Text is almost certainly the most popular text editor amongst web developers (in any language).

So, you might wonder, why use Vim or Emacs? They both have valid uses from an engineering standoint - any Clojure developer, for instance, would be foolish not to use Emacs, for reasons peculiar to both the language and the editor. They certainly are vastly less likely to crash than an IDE such as Eclipse or XCode, although they also contain far fewer features.

I am not interested in engineering arguments, however. Rather, what interests me most about Vim and Emacs (and the Vim-Emacs Debate itself) is its function as a source of *distinction* amongst programmers. To understand what I mean by "distinction" we must first travel through another arcane domain, the sociological theory of the great Pierre Bourdieu. Bourdieu's theory (or theories) of distinction, social capital, social practice, and so forth, are vast and deep in scope. I offer here less a reading of Bourdieu than an approximation of his understanding of capital - the specifics are less relevant here than the big picture, and some distortion is inevitable.
